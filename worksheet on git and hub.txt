                       
                                      SECTION A

1.A Version control system solves the problem of managing and tracking changes to file over time.it allows multiple developers to work on same project without conflict.it helps avoid overwrite .
Centralized and distributed version control systems differ primarily in how they store and manage project history. In a centralized system, all changes are tracked and stored on a central server, with developers checking out and checking back in files. In a distributed system, each developer has a full copy of the repository.
2.The key difference between Git and GitHub is that Git is a free, open source version control tool that developers install locally on their personal computers, while GitHub is a pay-for-use online service built to run Git in the cloud. 
3.The staging area is a file, generally contained in your Git directory, that stores information about what will go into your next commit. Its technical name in Git parlance is the “index”, but the phrase “staging area” works just as well.
4.The . git folder contains all the information that is necessary for your project in version control and all the information about commits, remote repository address, etc. All of them are present in this folder. It also contains a log that stores your commit history so that you can roll back to history.
5.The git branch command can be used to create a new branch. When you want to start a new feature, you create a new branch off main using git branch new_branch . Once created you can then use git checkout new_branch to switch to that branch.
6.Use git reset soft if you want to purge your commit history but keep your index and filesystem unchanged. Use git reset hard if you want to clear the index and revert all tracked files to their state at the reset commit.
7.Squash merging in Git combines multiple commits from a feature branch into a single commit when merging it into the main branch. This is useful for keeping a clean and linear history in the main branch by joining multiple smaller commits into one larger, meaningful commit. 
8.git rebase is a powerful Git command used to integrate changes from one branch onto another in a cleaner, linear way.  git rebase rewrites the commit history by changing the base of your branch to a new one.
9.Consider a scenario where a developer creates a feature branch named feature-branch from the main branch. While the developer works on feature-branch, the main branch receives new commits. 
                                      
                                   SECTION B


     TASK 1

PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT> cd "git -practice"
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git init
Initialized empty Git repository in C:/Users/kalir/OneDrive/Desktop/WEB DEV COHORT/git -practice/.git/
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> dir


    Directory: C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a---l        13-05-2025     21:55              0 bike.txt
-a---l        13-05-2025     21:54              0 car.txt


PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git add.
git: 'add.' is not a git command. See 'git --help'.

The most similar command is
        add
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git add .
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git commit -m"added car and bike text files"
[main (root-commit) 5a1f89a] added car and bike text files
 2 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 bike.txt
 create mode 100644 car.txt
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git status
On branch main
nothing to commit, working tree clean
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git log
commit 5a1f89a4938a7a8816f016cfc3c3e32ad4a140d7 (HEAD -> main)
 2 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 bike.txt
 create mode 100644 car.txt
 2 files changed, 0 insertions(+), 0 deletions(-)
 2 files changed, 0 insertions(+), 0 deletions(-)
 2 files changed, 0 insertions(+), 0 deletions(-)
 2 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 bike.txt
 create mode 100644 car.txt
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git status
On branch main
nothing to commit, working tree clean
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git log
commit 5a1f89a4938a7a8816f016cfc3c3e32ad4a140d7 (HEAD -> main)
Author: bhawna <kaliramanbhawna23@gmail.com>
Date:   Tue May 13 22:01:06 2025 +0530

    added car and bike text files
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git log --oneline
5a1f89a (HEAD -> main) added car and bike text files
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git status > git-output.txt
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git log --oneline >>git-output.txt
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> notepad git-output.txt


      TASK 2

PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git commit -m"hello.txt added"
On branch main
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        git-output.txt
        hello.txt

nothing added to commit but untracked files present (use "git add" to track)
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git add .
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git commit -m"hello.txt added"
[main 6764211] hello.txt added
 2 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 git-output.txt
 create mode 100644 hello.txt
 create mode 100644 hello.txt
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git log --oneline
6764211 (HEAD -> main) hello.txt added
6764211 (HEAD -> main) hello.txt added
5a1f89a added car and bike text files
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git reset --hard HEAD~1
HEAD is now at 5a1f89a added car and bike text files
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git log
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git log
commit 5a1f89a4938a7a8816f016cfc3c3e32ad4a140d7 (HEAD -> main)
Author: bhawna <kaliramanbhawna23@gmail.com>
Author: bhawna <kaliramanbhawna23@gmail.com>
Date:   Tue May 13 22:01:06 2025 +0530
Date:   Tue May 13 22:01:06 2025 +0530
added car and bike text files


            TASK 3

Windows PowerShell
Copyright (C) 2009 Microsoft Corporation. All rights reserved.

PS C:\Users\kalir\Desktop\webdev cohort> cd "C:\Users\DELL-SHIVAAYTECH\Desktop\webdev cohort\git-practice-repo"
PS C:\Users\kalir\Desktop\webdev cohort\git-practice-repo> git status
On branch main
nothing to commit, working tree clean
PS C:\Users\kalir\Desktop\webdev cohort\git-practice-repo> git remote add origin https://github.com/bhumi751/git-practice-repo.git
error: remote origin already exists.
PS C:\Users\kalir\Desktop\webdev cohort\git-practice-repo> git remote remove origin
PS C:\Users\kalir\Desktop\webdev cohort\git-practice-repo> git remote add origin https://github.com/bhumi751/git-practice-repo.git
PS C:\Users\kalir\Desktop\webdev cohort\git-practice-repo> git branch -M main
PS C:\Users\kalir\Desktop\webdev cohort\git-practice-repo> git push -u origin main



                                  SECTION C

            TASK 4

PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git branch feature-login
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git checkout feature-login
Switched to branch 'feature-login'
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git branch
* feature-login
  main
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git add .
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git commit -m"login.html is added"
[feature-login 9111849] login.html is added
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 login.html
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git checkout main
Switched to branch 'main'


           TASK 5

PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git branch feature about
fatal: not a valid object name: 'about'
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git branch feature-about
fatal: a branch named 'feature-about' already exists
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git checkout feature-about
Switched to branch 'feature-about'
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> echo "about us - line 1" > about.txt
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git add about.txt
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git commit -m"add first line"
[feature-about 1dc7015] add first line
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 about.txt
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> echo "about us - line 2" > about.txt
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git add about.txt
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git commit -m"add second line"
[feature-about f800d4e] add second line
 1 file changed, 0 insertions(+), 0 deletions(-)
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> echo "about us -line 3" > about.txt
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> echo "about us -line 3" > about.txt^C
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git add about.txt
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git commit -m"add thord line"
[feature-about 039e7bc] add thord line
 1 file changed, 0 insertions(+), 0 deletions(-)
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git checkout main
Switched to branch 'main'
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git merge --squash feature-about
Updating 9111849..039e7bc
Fast-forward
Squash commit -- not updating HEAD
[feature-about f800d4e] add second line
 1 file changed, 0 insertions(+), 0 deletions(-)
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> echo "about us -line 3" > about.txt
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> echo "about us -line 3" > about.txt^C
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git add about.txt
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git commit -m"add thord line"
[feature-about 039e7bc] add thord line
 1 file changed, 0 insertions(+), 0 deletions(-)
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git checkout main
Switched to branch 'main'
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git merge --squash feature-about
Updating 9111849..039e7bc
Fast-forward
Squash commit -- not updating HEAD
 about.txt | Bin 0 -> 38 bytes
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 about.txt
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git log --oneline
9111849 (HEAD -> main, feature-login) login.html is added
5a1f89a added car and bike text files
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git commit -m"squashed 3 lines"
[main ac01c3e] squashed 3 lines
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 about.txt
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice> git log --oneline
ac01c3e (HEAD -> main) squashed 3 lines
9111849 (feature-login) login.html is added
5a1f89a added car and bike text files
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git -practice>

                                                SECTION D

               TASK 6

Windows PowerShell
Copyright (C) 2009 Microsoft Corporation. All rights reserved.

PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\ git checkout main
Already on 'main'
M       git-practice-repo
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\ git checkout -b feature-rebase
Switched to a new branch 'feature-rebase'
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\ echo "Feature commit" > feature.txt
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\ git add feature.txt
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\ git commit -m "Add feature commit"
[feature-rebase 816a8b4] Add feature commit
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 feature.txt
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\git checkout main
Switched to branch 'main'
M       git-practice-repo
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\ echo "Main commit" > main.txt
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\ git add main.txt
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\ git commit -m "Add main commit"
[main 5ca5c98] Add main commit
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 main.txt
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\ git checkout feature-rebase
Switched to branch 'feature-rebase'
M       git-practice-repo
PS C:\Users\shivay\OneDrive\Desktop\WEB DEV COHORT\ git rebase main
Successfully rebased and updated refs/heads/feature-rebase.
PS C:\Users\kalir\OneDrive\Desktop\WEB DEV COHORT\ git log --oneline
b9e2bb1 (HEAD -> feature-rebase) Add feature commit
5ca5c98 (main) Add main commit
ee7a19a Initial commit
61fe6a4 First commit

                                      SECTION E

My repo of contribution with my name - Bhumi and email - bhumikamboj8@gmail.com on the contributers.txt
GitHub repo link of my contribution:- https://github.com/bhumi751/Open-Source-Contribution


